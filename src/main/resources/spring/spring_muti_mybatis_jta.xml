<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    <!-- 引入配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" order="1" ignore-unresolvable="true"/>

    <!-- 数据源1 多数据源事务控制数据源-->
    <bean id="demo1Factory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="demo1Atom"/>
        <property name="mapperLocations" value="classpath:/mapper/*/*Mapper.xml"/>
        <!-- mybatis配置文件 -->
        <property name="configLocation" value="classpath:spring/mybatis_config.xml"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="dao.demo1"/>
        <property name="sqlSessionFactoryBeanName" value="demo1Factory"/>
    </bean>
    <bean id="demo1Atom"
          class="com.atomikos.jdbc.AtomikosDataSourceBean"
          init-method="init"
          destroy-method="close">
        <property name="uniqueResourceName" value="mysql/demo1"/>
        <property name="xaDataSource" ref="demo1"/>
        <property name="maintenanceInterval" value="28000"/>
        <property name="testQuery" value="SELECT 1"/>
    </bean>
    <bean id="demo1" parent="baseDruid">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!-- 数据源1 -->


    <!-- 数据源2 多数据源事务控制数据源-->
    <bean id="demo2Factory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="demo2Atom"/>
        <property name="mapperLocations" value="classpath:/mapper/*/*Mapper.xml"/>
        <!-- mybatis配置文件 -->
        <property name="configLocation" value="classpath:spring/mybatis_config.xml"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="dao.demo2"/>
        <property name="sqlSessionFactoryBeanName" value="demo2Factory"/>
    </bean>
    <bean id="demo2Atom"
          class="com.atomikos.jdbc.AtomikosDataSourceBean"
          init-method="init"
          destroy-method="close">
        <property name="uniqueResourceName" value="mysql/demo2"/>
        <property name="xaDataSource" ref="demo2"/>
        <property name="maintenanceInterval" value="28000"/>
        <property name="testQuery" value="SELECT 1"/>
    </bean>
    <bean id="demo2" parent="baseDruid">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.other.url}"/>
        <property name="username" value="${jdbc.other.username}"/>
        <property name="password" value="${jdbc.other.password}"/>
    </bean>
    <!-- 数据源2 -->

    <!-- 基础连接池 -->
    <bean id="baseDruid" class="com.alibaba.druid.pool.xa.DruidXADataSource"
          init-method="init" destroy-method="close" lazy-init="true">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10"/>
        <property name="minIdle" value="10"/>
        <property name="maxActive" value="50"/>
        <!-- 配置获取连接等待超时的时间，单位是毫秒-->
        <property name="maxWait" value="10000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- 申请连接时，若空闲时间大于timeBetweenEvictionRunsMillis，进行检测连接是否可用 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
        <property name="defaultAutoCommit" value="true"/>
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="select 1 "/>
    </bean>

    <!-- 配置数据库事务开始 -->
    <!-- atomikos事务管理器 分布式事务管理器-->
    <bean id="atomikosTransactionManager"
          class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init"
          destroy-method="close">
        <property name="forceShutdown" value="true"/>
    </bean>
    <bean id="atomikosUserTransaction"
          class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="90000"/>
    </bean>
    <bean id="springTransactionManager"
          class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosTransactionManager"/>
        <property name="userTransaction" ref="atomikosUserTransaction"/>
        <property name="allowCustomIsolationLevels" value="true"/>
    </bean>
    <!-- 开启注解 -->
    <tx:annotation-driven transaction-manager="springTransactionManager"/>
    <!-- 配置数据库事务结束 -->
</beans>