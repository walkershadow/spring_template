<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

        <!-- 引入配置文件 -->
        <context:property-placeholder location="classpath:jdbc.properties" order="1" ignore-unresolvable="true" />

        <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
                <property name="dataSource" ref="dataSource" />
                <!-- 自动扫描mapping.xml文件 -->
                <property name="mapperLocations" value="classpath:/mapper/*Mapper.xml"/>
                <!-- mybatis配置文件 -->
                <property name="configLocation" value="classpath:spring/mybatis_config.xml"/>
        </bean>

        <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
                <property name="basePackage" value="com.dao" />
                <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        </bean>


        <!-- 事务配置开始 -->
        <!-- 事务管理 -->
        <bean id="transactionManager"
              class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                <property name="dataSource" ref="dataSource" />
        </bean>
        <!-- 事务切面配置 -->
        <aop:config>
                <aop:pointcut id="transactionAdvice" expression="execution (* com.service.*.*(..))"/>
                <aop:advisor advice-ref="advice" pointcut-ref="transactionAdvice"/>
        </aop:config>
        <tx:advice id="advice" transaction-manager="transactionManager">
                <tx:attributes>
                        <tx:method name="query*" propagation="SUPPORTS" timeout="5000" read-only="true" rollback-for="Throwable"/>
                        <tx:method name="get*" propagation="SUPPORTS" timeout="5000" read-only="true" rollback-for="Throwable"/>
                        <tx:method name="count*" propagation="SUPPORTS" timeout="5000" read-only="true" rollback-for="Throwable"/>
                        <tx:method name="insert*" propagation="REQUIRED" timeout="5000" read-only="false" rollback-for="Throwable"/>
                        <tx:method name="delete*" propagation="REQUIRED" timeout="5000" read-only="false" rollback-for="Throwable"/>
                        <tx:method name="update*" propagation="REQUIRED" timeout="5000" read-only="false" rollback-for="Throwable"/>
                </tx:attributes>
        </tx:advice>
        <!-- 事务配置结束 -->


        <!-- 数据库连接池 -->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
              init-method="init" destroy-method="close">
                <property name="driverClassName" value="${jdbc.driverClassName}" />
                <property name="url" value="${jdbc.url}" />
                <property name="username" value="${jdbc.username}" />
                <property name="password" value="${jdbc.password}" />
                <!-- 配置初始化大小、最小、最大 -->
                <property name="initialSize" value="1" />
                <property name="minIdle" value="1" />
                <property name="maxActive" value="10" />
                <!-- 配置获取连接等待超时的时间，单位是毫秒-->
                <property name="maxWait" value="10000" />
                <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
                <property name="timeBetweenEvictionRunsMillis" value="60000" />
                <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
                <property name="minEvictableIdleTimeMillis" value="300000" />
                <!-- 申请连接时，若空闲时间大于timeBetweenEvictionRunsMillis，进行检测连接是否可用 -->
                <property name="testWhileIdle" value="true" />
                <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
                <property name="testOnBorrow" value="true" />
                <property name="testOnReturn" value="false" />
                <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
                <property name="defaultAutoCommit" value="true" />
                <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
                <property name="validationQuery" value="select 1 " />
        </bean>

</beans>